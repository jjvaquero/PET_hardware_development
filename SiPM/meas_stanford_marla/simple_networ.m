% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Mon Nov 23 21:31:03 CET 2015
%
% This script assumes these variables are defined:
%
%   inWidths - input data.
%   outPos - target data.

inputs = inWidths;
targets = outPos;

% Create a Fitting Network
hiddenLayerSize = 100; % [64 16];
net = fitnet(hiddenLayerSize);


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
%modify the training parameters
net.trainParam.max_fail = 30;



% Train the Network
%[net,tr] = train(net,inputs,targets);

[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inWidths2);
errors = gsubtract(outPos2,outputs);
performance = perform(net,outPos2,outputs)

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotfit(net,inputs,targets)
%figure, plotregression(targets,outputs)
%figure, ploterrhist(errors)

%net = red1_100;
outputs = net(inWidths2);
%use the values in outputs to generate a new image
imgSize = 256; 
floodImgNN = zeros(imgSize,imgSize);
for i = 1 : size(outputs,2)
    X = round(outputs(1,i));
    Y = round(outputs(2,i));
    if X>0 && X<imgSize && Y>0 && Y<imgSize
        floodImgNN(X,Y) = floodImgNN(X,Y)+1;
    end
end
figure;
imagesc(floodImgNN);